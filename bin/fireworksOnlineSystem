#!/usr/bin/env perl

use Switch;
use File::Copy;
use Proc::Killfam;

use Proc::ProcessTable;
use strict;
use vars qw ($FW_ENABLED $FW_DIR);
use File::Basename;
use Term::ANSIColor qw(:constants);

#  search two levels
my $FW_DIR = dirname(__FILE__);
$FW_DIR = dirname($FW_DIR);
$FW_DIR = dirname($FW_DIR);

my $verbose = 0;
my $started = 0; 


sub readLineFromFile
{
  # Returns the first line from file or "" if the file does not exist.
  # Dies if file can not be opened for reading.

  my $filename = shift;
  return "" unless -e $filename;
  open F, $filename or die("Can't read_line_from_file!");
  my $line = <F>;
  close F;
  chomp $line;
  return $line;
}

# edit fw-congif
sub setEnabled
{  
  my $fwdir = shift;
  my $enabled = shift;
  print("setEnabled $fwdir\n");
  my $config="$fwdir/bin/fw-config.txt";
  my $configBAQ="$fwdir/bin/fw-config.txt.BAQ";
  copy("$config", "$configBAQ");
  open (MYFILE, ">$config");
  open (MYFILE_BAQ, "$configBAQ");
  printf("Edit $config. Set FW_ENABLED to %d\n", $enabled );

  while (<MYFILE_BAQ>) {
    if ( $_ =~ m/(\$FW_ENABLED\s*=\s*)(\d)/ )
    { 
      #printf("Set value in $config file\n");
      print MYFILE "$1"."$enabled ;\n";
    } 
    else { 
      print MYFILE "$_";
    }
  }

  close MYFILE;
  close MYFILE_BAQ;
  unlink $configBAQ;
}

sub getCmsShowExePid
{
  my $fwdir = shift;
  if ( -r "$fwdir/log/cmsShow_pid") {
    my $sp = readLineFromFile("$fwdir/log/monitor_pid");
    my $tree=`pstree -pcl $sp`;
    if ($tree =~ /cmsShow.exe\((\d+)\)/) {
      return $1;
    }
  }
  return 0;
}

# look for log and than for any process
sub fwStatus
{
  my $fwdir = shift;
    print BOLD, YELLOW, "status [$fwdir]\n", RESET;
    my $running = 0;
    if ( -r "$fwdir/log/monitor_pid")
    {
      my $monitorPid=readLineFromFile("$fwdir/log/monitor_pid");
      if ( -r  "/proc/${monitorPid}")  {
        $running = 1;
	printf ("%-13s PID (%4d)  \n","fw-monitor.pl",  $monitorPid);
      }
      elsif ($verbose) {
	printf ("%-13s is NOT running\n", "fw-monitor.pl");
      }

      my $cpid = getCmsShowExePid($fwdir);
      if ( $cpid) {
	if ( -r"/proc/$cpid") {
          $running = 1;
	  printf ("%-13s PID (%4d)\n","cmsShow.exe ", $cpid);
	}
	elsif ($verbose) {
	  printf ("%-13s is NOT running\n", "cmsShow.exe");
	}
      }
    }

  if (!$running) {
    printf("NOT running.\n");
  }
}



# set disabled flag and wait fw-monitor and cmsShow to die
sub fwStop
{
  my $fwdir = shift;
  my $monitorPid = 0;
  my $cmsShowPid= 0;

  if ( -r "$fwdir/log/monitor_pid") {
    $monitorPid=readLineFromFile("$fwdir/log/monitor_pid"); 
    print BOLD, RED, "Terminating $fwdir/bin/fw-monitor and its child processes.\n", RESET; 
    kill(15, $monitorPid);
  }

  if ( -r "$fwdir/log/cmsShow_pid") {
    $cmsShowPid=readLineFromFile("$FW_DIR/log/cmsShow_pid");
  }

  setEnabled($fwdir,0);
  
  # wait max 3 seconds for processes to terminate
  my $wcnt = 0;
  while ($wcnt < 3)
  {
    unless ( -r "/proc/${monitorPid}" ) { last; }
    $wcnt++;
  }

  # forcefully kill cmsShow.exe
  while ( ( -r "/proc/${monitorPid}") && (-r "/proc/${cmsShowPid}")  )
  {
    if ( -r "/proc/${cmsShowPid}") { 
      my $exePid = getCmsShowExePid($fwdir);
      if ($exePid) {
	printf("Killing cmsShow.exe process with pid [%4d] \n", $exePid);
	kill(9, $exePid);
	sleep 2; 
      }
      else {
	print ("Can't locate cmsShow.exe process \n");
      }
    }
    if ( $monitorPid)  { 
      printf("Killing fw-monitor process with pid [%4d] \n", $monitorPid);
      kill(9, $monitorPid);
      sleep 2; 
    }

  }
}

# set display enabled and run fw-monitor.pl not to wait for cron


sub fwStart
{
  my $fwdir = shift;
  print BOLD, CYAN, "Starting online event display at $fwdir\n", RESET;
  setEnabled($fwdir, 1);
  system("nohup $fwdir/bin/fw-monitor.pl $fwdir > /dev/null 2>&1&");
}

################################################################################
# MAIN
################################################################################


my $path = $FW_DIR;

if (@ARGV == 2) {
  $verbose = 1;
  $path = $ARGV[1];
}

my @dirs;
opendir D, "$path";
while ($_ = readdir(D))
{
  my $pref = "$path/$_";
  next unless -d $pref;
  my $fn = "$pref/bin/fireworksOnlineSystem";
  push @dirs, $pref if -x $fn;
}
closedir D;


if (@ARGV == 0)
{
  foreach(@dirs) { fwStatus $_; }
  exit;
}
else
{
  switch ($ARGV[0]) {
    case "start" {
      if (@dirs > 1) { print "More one EVD find in $FW_DIR. Must specify subdirectory \n"; exit }
      fwStart $dirs[0]; 
    }
    case "stop" {
      my $xx;
      foreach $xx (@dirs) { fwStop $xx; };
      foreach(@dirs) { fwStatus $_; };
    }
    case "status" {
      foreach(@dirs) { fwStatus $_; };
    }
    case "restart" {

      if (@dirs > 1) { print "More one EVD find in $FW_DIR. Must specify subdirectory \n"; exit }

      my @dirsTOP;
      my $top = dirname("$path");
      print ("... $top ;;;;; \n");
      opendir X, $top;
      while ($_ = readdir(X)) {
	my $pref = "$top/$_";
	next unless -d $pref;
	printf "===> $pref\n";
	my $fn = "$pref/bin/fireworksOnlineSystem";
	push @dirsTOP, $pref if -x $fn;
      }
      closedir X;
      foreach(@dirsTOP) { fwStop $_; };

      foreach(@dirs) { fwStart $_; };
    }
    else {
      print("Invalid option. \n");
    }
  }
}
